{"version":3,"sources":["candy-machine.ts","assets/img/background.png","assets/img/twitter.png","assets/img/github.png","Header.jsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","price","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","useStyles","makeStyles","typographyStyles","flex","darkTheme","createTheme","palette","type","Header","ThemeProvider","theme","AppBar","position","color","Toolbar","Typography","Button","size","href","target","src","TwitterIcon","height","alt","fullWidth","GithubIcon","variant","style","textTransform","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","WhiteTextTypography","withStyles","root","textAlign","fontSize","breakpoints","up","SmallWhiteTextTypography","GreyTextTypography","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","counter","setCounter","setPrice","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useWallet","setCandyMachine","onMint","connected","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","signAllTransactions","signTransaction","Grid","item","align","background","width","resizeMode","toLocaleString","toBase58","disabled","onClick","backgroundColor","CircularProgress","date","onMount","onComplete","renderer","container","direction","xs","sm","alignItems","Snackbar","autoHideDuration","onClose","Alert","process","Connection","startDateSeed","parseInt","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cee8c90.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n  price: number,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  console.log('state.data', state.data);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const price = state.data.price.toNumber() * 0.000000001;\r\n\r\n  let goLiveDate = state.data.goLiveDate.toNumber();\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n    price,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n): Promise<string> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    instructions: [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n    ],\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","export default __webpack_public_path__ + \"static/media/background.8d742ade.png\";","export default __webpack_public_path__ + \"static/media/twitter.27cda7bd.png\";","export default __webpack_public_path__ + \"static/media/github.f0331ced.png\";","import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Button } from \"@material-ui/core\";\r\nimport AcUnitRoundedIcon from \"@material-ui/icons/AcUnitRounded\";\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n// These imports are needed for the Dialog\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { createTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\r\n\r\n// Icons\r\nimport TwitterIcon from \"./assets/img/twitter.png\";\r\n// import DiscordIcon from \"./assets/img/discord.png\"\r\nimport GithubIcon from \"./assets/img/github.png\"\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1\r\n  }\r\n}));\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst Header = () => {\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n        <AppBar position=\"relative\" color=\"transparent\">\r\n          <Toolbar>\r\n\r\n            <Typography>\r\n              <Button size=\"medium\" href=\"https://twitter.com/SOLSTATIONNFT\" target=\"_blank\">\r\n                <img src={TwitterIcon} height = \"30px\" alt=\"SOLSTATIONNFT TWITTER\" fullWidth={false} />\r\n              </Button>\r\n               <Button size=\"small\" href=\"https://github.com/borocode/candy-machine-mint-1\" target=\"_blank\">\r\n                <img src={GithubIcon} height = \"30px\" />\r\n              </Button>  \r\n            </Typography>\r\n\r\n            {/* <div>\r\n                <Button variant=\"contained\" size=\"medium\" fullWidth={false} href=\"/\" style={{textTransform: 'none'}} >\r\n                  HOME\r\n                </Button>\r\n            </div> */}\r\n<br/ >\r\n\r\n            <div>\r\n                <Button variant=\"contained\" size=\"medium\" color=\"info\" href=\"https://solstation.boroghor.com\" style={{textTransform: 'none'}}>\r\n                  SOLSTATION MINI COLLECTION\r\n                </Button>\r\n            </div>\r\n\r\n           </Toolbar>\r\n        </AppBar>\r\n    </ThemeProvider>\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import \"./Home.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { responsiveFontSizes } from '@mui/material/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport background from \"./assets/img/background.png\"\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Header from \"./Header\";\r\nimport * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"./candy-machine\";\r\nimport { YoutubeSearchedFor } from \"@material-ui/icons\";\r\nimport shadows from \"@material-ui/core/styles/shadows\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)` color: primary`;\r\n// const ConnectButton = styled(WalletDialogButton)` color: secondary`;\r\n\r\nconst CounterText = styled.span``; // add your styles here\r\n\r\nconst MintContainer = styled.div``; // add your styles here\r\n\r\nconst MintButton = styled(Button)` color: white`; // add your styles here\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst theme = createTheme();\r\n\r\n// theme.typography.h3 = {\r\n//   fontSize: '1.2rem',\r\n//   '@media (min-width:600px)': {\r\n//     fontSize: '15rem',\r\n//   },\r\n//   [theme.breakpoints.up('md')]: {\r\n//     fontSize: '2rem',\r\n//   },\r\n// };\r\n\r\nconst styles = {\r\n  paperContainer: {\r\n    backgroundImage: './assets/img/background.png',\r\n  },\r\n}\r\n\r\nconst WhiteTextTypography = withStyles({\r\n  root: {\r\n    color: \"#FFFFFF\",\r\n    textAlign: 'center',\r\n    fontSize: '4rem',\r\n  '@media (min-width:600px)': {\r\n    fontSize: '7rem',\r\n  },\r\n  [theme.breakpoints.up('md')]: {\r\n    fontSize: '11rem',\r\n  },\r\n    /*shadows: \"0 3px 5px 2px rgba(255, 105, 135, 0.3)\"\r\n    fonts*/\r\n  }\r\n})(Typography);\r\n\r\nconst SmallWhiteTextTypography = withStyles({\r\n  root: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: '1.4rem'\r\n  /*  fonts*/\r\n  }\r\n})(Typography);\r\n\r\nconst GreyTextTypography = withStyles({\r\n  root: {\r\n    color: \"#E0E0E0\"\r\n  }\r\n})(Typography);\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\n\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [counter, setCounter] = useState<any>({});\r\n  const [price, setPrice] = useState<number | null>(null);\r\n\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n\r\n  const wallet = useWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet?.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (\r\n        !wallet ||\r\n        !wallet.publicKey ||\r\n        !wallet.signAllTransactions ||\r\n        !wallet.signTransaction\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const anchorWallet = {\r\n        publicKey: wallet.publicKey,\r\n        signAllTransactions: wallet.signAllTransactions,\r\n        signTransaction: wallet.signTransaction,\r\n      } as anchor.Wallet;\r\n\r\n      const { candyMachine, goLiveDate, itemsRemaining, itemsAvailable, price } =\r\n        await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection\r\n        );\r\n\r\n      setIsSoldOut(itemsRemaining === 0);\r\n      setStartDate(goLiveDate);\r\n      setCandyMachine(candyMachine);\r\n      setCounter({\r\n        itemsRemaining,\r\n        itemsAvailable\r\n      });\r\n      setPrice(price);\r\n    })();\r\n  }, [wallet, props.candyMachineId, props.connection]);\r\n\r\n  return (\r\n    <main>\r\n    <Grid item>\r\n      <Header />\r\n        </Grid>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <Typography align=\"center\"><img src={background} alt=\"SOLSTATION PIXEL CONTACT SHEET\" width=\"100%\" resizeMode=\"center\" position=\"relative\"/></Typography><br />\r\n\r\n        <WhiteTextTypography variant=\"h3\" align=\"center\" position=\"relative\">\r\n          SOLSTATION PIXEL <br />\r\n                 </WhiteTextTypography>\r\n\r\n\r\n\r\n\r\n         <SmallWhiteTextTypography align=\"center\" variant=\"body1\">\r\n          <p> {counter.itemsRemaining} of {counter.itemsAvailable} left </p>\r\n        </SmallWhiteTextTypography>\r\n\r\n        <SmallWhiteTextTypography align=\"center\" variant=\"body1\">{wallet.connected && (\r\n          <p>your balance: ◎{(balance || 0).toLocaleString()} </p>\r\n        )}</SmallWhiteTextTypography>   \r\n\r\n        \r\n        <SmallWhiteTextTypography align=\"center\" variant=\"body1\">{wallet.connected && (\r\n          <p>your addy: {shortenAddress(wallet.publicKey?.toBase58() || \"\")}</p>\r\n        )}</SmallWhiteTextTypography>\r\n\r\n{/* \r\n        <SmallWhiteTextTypography align=\"center\" variant=\"body1\">\r\n          <p>how many left? {counter.itemsRemaining} </p>\r\n        </SmallWhiteTextTypography> */}\r\n\r\n\r\n        <Typography align=\"center\" variant=\"body1\">\r\n        <MintContainer>\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <MintButton\r\n              disabled={isSoldOut || isMinting || !isActive}\r\n              onClick={onMint}\r\n              variant=\"contained\"\r\n              style={{backgroundColor: \"slateblue\", color: \"white\"}}\r\n\r\n            >\r\n              {isSoldOut ? (\r\n                \"SOLD OUT\"\r\n              ) : isActive ? (\r\n                isMinting ? (\r\n                  <CircularProgress />\r\n                ) : (\r\n                  `◎${price} `\r\n                )\r\n              ) : (\r\n                <Countdown\r\n                  date={startDate}\r\n                  onMount={({ completed }) => completed && setIsActive(true)}\r\n                  onComplete={() => setIsActive(true)}\r\n                  renderer={renderCounter}\r\n                />\r\n              )}\r\n            </MintButton>\r\n          )}\r\n        </MintContainer>\r\n        </Typography>\r\n\r\n        <Grid container direction=\"column\">\r\n          <Grid item container>\r\n          <Grid item xs={false} sm={1} />\r\n            <Grid item xs={12} sm={4} alignItems=\"stretch\">\r\n              <SmallWhiteTextTypography variant=\"h6\" align=\"center\">\r\n              <br />What is this? <br />\r\n              </SmallWhiteTextTypography>\r\n              <GreyTextTypography variant=\"body1\" align=\"center\">\r\n                art\r\n                <br />\r\n                mint it or don't <br />\r\n                idek if I wanna list these on digitaleyes<br /><br />\r\n                \r\n              </GreyTextTypography>\r\n            </Grid>\r\n\r\n            <Grid item xs={false} sm={2}/>\r\n\r\n            <Grid item xs={12} sm={4} alignItems=\"stretch\">\r\n              <SmallWhiteTextTypography variant=\"h6\" align=\"center\">\r\n              <br />What's next? <br />\r\n              </SmallWhiteTextTypography>\r\n              <GreyTextTypography variant=\"body1\" align=\"center\">\r\n                {/* Still dropping animated SOLSTATION MINI  <br /><br />\r\n                collection one by one <Button variant=\"text\" \r\n                href=\"solstation.boroghor.com\" \r\n                style={{textTransform: 'none'}}>at my Metaplex instance.  \r\n                </Button>*/} RARE ROCK <br />2️⃣❌💯<br /><br /><br /><br />\r\n              </GreyTextTypography>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={false} sm={1} /> */}\r\n\r\n          </Grid>\r\n        </Grid>\r\n\r\n\r\n        <Snackbar\r\n          open={alertState.open}\r\n          autoHideDuration={6000}\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n        >\r\n          <Alert\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n            severity={alertState.severity}\r\n          >\r\n            {alertState.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </ThemeProvider>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Home from \"./Home\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\n\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ConnectionProvider endpoint={endpoint}>\r\n      <WalletProvider wallets={wallets} autoConnect>\r\n        <WalletDialogProvider>\r\n          <Home\r\n            candyMachineId={candyMachineId}\r\n            config={config}\r\n            connection={connection}\r\n            startDate={startDateSeed}\r\n            treasury={treasury}\r\n            txTimeout={txTimeout}\r\n          />\r\n        </WalletDialogProvider>\r\n      </WalletProvider>\r\n    </ConnectionProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}